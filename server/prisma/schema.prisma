generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    password        String
    phoneNumber     String
    isTermsAccepted Boolean   @default(false) @map("Terms&conditions")
    profileImage    String?
    userAddress     Address[]
    Session         Session?
    Cart            Cart[]
    Review          Review[]
    Order           Order[]

    @@map("Users")
}

model Session {
    id         String   @id @default(cuid())
    sessionKey String   @unique
    expiresAt  DateTime
    createdAt  DateTime @default(now())

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
    id        String   @id @default(cuid())
    address   String
    city      String
    state     String?
    country   String
    pincode   String
    note      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id           Int             @id @default(autoincrement())
    title        String
    description  String
    category     ProductCategory
    productImage String
    material     MaterialType
    size         SockSize
    tags         String?
    price        Float
    salePrice    Float?
    inStock      Boolean         @default(true)
    inventory    Int
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    CartItem     CartItem[]
    Review       Review[]
}

model Cart {
    id     String     @id @default(cuid())
    userId String
    user   User       @relation(fields: [userId], references: [id])
    items  CartItem[]
    Order  Order[]
}

model CartItem {
    id       String @id @default(cuid())
    quantity Int    @default(1)

    cartId String
    cart   Cart   @relation(fields: [cartId], references: [id])

    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id       String  @id @default(cuid())
    userName String?
    starts   Int     @default(0)
    message  String?

    productId Int     @unique
    product   Product @relation(fields: [productId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FeaturedProducts {
    id        String   @id @default(cuid())
    images    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id              String        @id @default(cuid())
    cartId          String
    cart            Cart          @relation(fields: [cartId], references: [id])
    orderStatus     OrderStatus   @default(PENDING)
    paymentStatus   PaymentStatus @default(PENDING)
    totalAmount     Float
    paymentId       String?
    payerId         String?
    orderDate       DateTime      @default(now())
    orderUpdateDate DateTime      @updatedAt

    customerId String
    customer   User   @relation(fields: [customerId], references: [id])
}

// ================ ENUMS ===============

enum ProductCategory {
    HALF_SOCKS
    NO_SHOW_SOCKS
    ANKLE_SOCKS
    CREW_SOCKS
}

enum MaterialType {
    COTTON
    BAMBOO
}

enum SockSize {
    ONE_SIZE
    XS_S
    S_M
    M_L
    L_XL
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}
