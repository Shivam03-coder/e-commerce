generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String            @id @default(cuid())
    name                 String?
    email                String?           @unique
    password             String
    phoneNumber          String
    isTermsAccepted      Boolean           @default(false) @map("Terms_conditions")
    profileImage         String?
    userAddress          Address[]
    Cart                 Cart[]
    Review               Review[]
    Order                Order[]
    userRole             Role              @default(USER)
    cartProductCount     Int?              @default(0)
    favoriteProductCount Int?              @default(0)
    favoriteProducts      FavoriteProduct[]

    @@map("Users")
}

model Address {
    id         String   @id @default(cuid())
    address    String
    city       String
    state      String?
    country    String
    pincode    String
    note       String?
    isSelected Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id              Int               @id @default(autoincrement())
    title           String            @db.VarChar(600)
    description     String            @db.VarChar(600)
    category        ProductCategory
    productImage    String
    material        MaterialType
    tags            String
    price           Float
    salePrice       Float?
    inStock         Boolean           @default(true)
    inventory       Int
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    sizeStocks      SizeStock[]
    CartItem        CartItem[]
    Review          Review[]
    favoriteProducts FavoriteProduct[]
}

model SizeStock {
    id        String   @id @default(cuid())
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int
    size      SockSize
    stock     Int
}

model Cart {
    id     String     @id @default(cuid())
    userId String     @unique
    user   User       @relation(fields: [userId], references: [id])
    items  CartItem[]
    Order  Order[]
}

model CartItem {
    id       String @id @default(cuid())
    quantity Int    @default(1)

    cartId String
    cart   Cart   @relation(fields: [cartId], references: [id])

    productId Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FavoriteProduct {
    id        String  @id @default(cuid())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    createdAt DateTime @default(now())

    @@unique([userId, productId])
}

model Review {
    id      String  @id @default(cuid())
    stars   Int     @default(0)
    message String?

    productId Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FeaturedProducts {
    id                   String   @id @default(cuid())
    featuredProductImage String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

model Order {
    id              String        @id @default(cuid())
    cartId          String
    cart            Cart          @relation(fields: [cartId], references: [id])
    orderStatus     OrderStatus   @default(PENDING)
    paymentStatus   PaymentStatus @default(PENDING)
    totalAmount     Float
    paymentId       String?
    payerId         String?
    orderDate       DateTime      @default(now())
    orderUpdateDate DateTime      @updatedAt
    customerId      String
    customer        User          @relation(fields: [customerId], references: [id])
}

enum ProductCategory {
    HALF_SOCKS
    NO_SHOW_SOCKS
    ANKLE_SOCKS
    CREW_SOCKS
}

enum MaterialType {
    COTTON
    BAMBOO
}

enum SockSize {
    ONE_SIZE
    XS_S
    S_M
    M_L
    L_XL
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

enum Role {
    USER
    ADMIN
}
