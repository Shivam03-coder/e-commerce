generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String            @id @default(cuid())
    name                 String?
    email                String?           @unique
    password             String
    phoneNumber          String
    isTermsAccepted      Boolean           @default(false) @map("Terms_conditions")
    profileImage         String?
    userAddress          Address?
    Cart                 Cart[]
    Review               Review[]
    Order                Order[]
    userRole             Role              @default(USER)
    cartProductCount     Int?              @default(0)
    favoriteProductCount Int?              @default(0)
    favoriteProducts     FavoriteProduct[]

    @@map("Users")
}

model Address {
    id               String   @id @default(cuid())
    address          String
    city             String
    state            String?
    country          String
    pincode          String
    formattedaddress String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id               Int               @id @default(autoincrement())
    title            String            @db.VarChar(600)
    description      String            @db.VarChar(600)
    category         ProductCategory
    productImage     String
    material         MaterialType
    tags             String
    price            Float
    salePrice        Float?
    inStock          Boolean           @default(true)
    inventory        Int
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    sizeStocks       SizeStock[]
    CartItem         CartItem[]
    Review           Review[]
    favoriteProducts FavoriteProduct[]
}

model SizeStock {
    id        String   @id @default(cuid())
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int
    size      SockSize
    stock     Int
}

model Cart {
    id         String     @id @default(cuid())
    userId     String     @unique
    user       User       @relation(fields: [userId], references: [id])
    cartStatus CartStatus @default(PENDING)
    items      CartItem[]
    orders Order[]
}

model CartItem {
    id               String                    @id @default(cuid())
    cartId           String
    cart             Cart                      @relation(fields: [cartId], references: [id], onDelete: Cascade)
    productId        Int
    product          Product                   @relation(fields: [productId], references: [id], onDelete: Restrict)
    sizesAndQuantity CartItemSizeAndQuantity[]
    createdAt        DateTime                  @default(now())
    updatedAt        DateTime                  @updatedAt

    @@index([cartId, productId], name: "cart_product_index")
}

model CartItemSizeAndQuantity {
    id         String   @id @default(cuid())
    cartItemId String
    cartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
    quantity   Int
    size       SockSize
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([cartItemId, size], name: "cartItem_size_unique")
    @@index([cartItemId], name: "cartItem_index")
    @@index([size], name: "size_index")
}

model Order {
    id              String        @id @default(cuid())
    rozarPayOrderId String?
    orderStatus     OrderStatus   @default(PENDING)
    paymentStatus   PaymentStatus @default(PENDING)
    totalAmount     Float
    customerId      String
    paymentId       String?
    orderDate       DateTime      @default(now())
    cartId          String
    cart            Cart          @relation(fields: [cartId], references: [id])
    orderUpdateDate DateTime      @updatedAt
    customer        User          @relation(fields: [customerId], references: [id])
}

model FavoriteProduct {
    id        String  @id @default(cuid())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    createdAt DateTime @default(now())

    @@unique([userId, productId])
}

model Review {
    id      String  @id @default(cuid())
    stars   Int     @default(0)
    message String?

    productId Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FeaturedProducts {
    id                   String   @id @default(cuid())
    featuredProductImage String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

enum ProductCategory {
    HALF_SOCKS
    NO_SHOW_SOCKS
    ANKLE_SOCKS
    CREW_SOCKS
}

enum MaterialType {
    COTTON
    BAMBOO
}

enum SockSize {
    ONE_SIZE
    XS_S
    S_M
    M_L
    L_XL
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

enum Role {
    USER
    ADMIN
}

enum CartStatus {
    ORDERED
    PENDING
}
